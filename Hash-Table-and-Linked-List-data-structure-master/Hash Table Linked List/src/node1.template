/*
 * node<Item>1.cpp
 *
 *  Created on: Oct 28, 2017
 *      Author: W520
 */

#include "node1.h"

namespace JONTRAN_1{
	template<class Item>
	void list_head_insert(node<Item>*& head_ptr, const Item& entry, const int& key){
		head_ptr = new node<Item> (entry, head_ptr);
	 
		head_ptr->set_key(key);
	}
	template<class Item>
	void list_insert(node<Item>* previous_ptr, const Item& entry){
		node<Item>* inserted_ptr;
		inserted_ptr = new node<Item>(entry, previous_ptr->link());
		previous_ptr->set_link(inserted_ptr);
	}
	template<class Item>
	node<Item>* list_search(node<Item>* head_ptr, const Item& target){
		node<Item>* current_ptr;
		for(current_ptr = head_ptr; current_ptr != NULL; current_ptr = current_ptr->link()){
			if(target == current_ptr->data()){
				return current_ptr;
			}
		}
		return NULL;

	}
	template<class Item>
	std::size_t list_length (const node<Item>*& head_ptr){
		const node<Item>* current;
		size_t howmany = 0;
		for(current = head_ptr; current != NULL; current = current->link() ){
			++howmany;
		}
		return howmany;
	}
	template<class Item>
	const node<Item>* list_search(const node<Item>* head_ptr, const Item& target){
		const node<Item>* current_ptr;
		for(current_ptr = head_ptr; current_ptr != NULL; current_ptr = current_ptr->link()){
			if(target==current_ptr->data()){
				return current_ptr;
			}
		}
		return NULL;

	}
	template<class Item>
	const node<Item>* key_search(const node<Item>* head_ptr, const int& key){
		const node<Item>* target_ptr;
		for(target_ptr = head_ptr; target_ptr!=NULL; target_ptr = target_ptr->link()){
			if(key==target_ptr->get_key()){
				return target_ptr;
			}
		}
		return NULL;
	}
	template<class Item>
	node<Item>* key_search(node<Item>* head_ptr, const int& key){
		node<Item>* target_ptr;
		for(target_ptr = head_ptr; target_ptr!=NULL; target_ptr = target_ptr->link()){
			if(key==target_ptr->get_key()){
				return target_ptr;
			}
		}
		return NULL;
	}
	template <class NodePtr, class SizeType>
	NodePtr* list_locate(NodePtr* head_ptr, SizeType position){
		NodePtr* current_ptr;
		SizeType i;
		current_ptr = head_ptr;
		for(i = 0 ; (current_ptr != NULL)&&(i<position);++i){
			current_ptr = current_ptr->link();
		}
		return current_ptr;
	}
	template <class NodePtr, class SizeType>
	const NodePtr* list_locate(const NodePtr* head_ptr, SizeType position){
			const NodePtr* current_ptr;
			SizeType i;
			current_ptr = head_ptr;
			for(i = 0 ; (current_ptr != NULL)&&(i<position);++i){
				current_ptr = current_ptr->link();
			}
			return current_ptr;
		}
	template<class Item>
	void list_head_remove (node<Item>*& head_ptr){
		if(head_ptr == NULL){
			return;
		}
		node<Item>* remove_ptr;
		remove_ptr = head_ptr;
		head_ptr = head_ptr->link();
		delete remove_ptr;
	}
	template<class Item>
	void list_remove(node<Item>* previous_ptr){
		node<Item>* removed_ptr;
		removed_ptr = previous_ptr->link();
		previous_ptr->set_link(removed_ptr->link());
		delete removed_ptr;
	}
	template<class Item>
	void clear(node<Item>*& head_ptr){
		while(head_ptr !=NULL){
			list_head_remove(head_ptr);
		}
	}
	template<class Item>
	void list_head_insert_without_key(node<Item>*& head_ptr, const Item& entry){
		head_ptr = new node<Item> (entry, head_ptr);
 	}
	template<class Item>
	void list_copy(const node<Item>* source_ptr, node<Item>*& head_ptr, node<Item>*& tail_ptr){
		head_ptr = NULL;
		tail_ptr = NULL;
		if(source_ptr == NULL){
			return;
		}
		list_head_insert_without_key(head_ptr,source_ptr->data());
		tail_ptr = head_ptr;
		source_ptr = source_ptr->link();
		while(source_ptr != NULL){
			list_insert(tail_ptr,source_ptr->data());
			source_ptr= source_ptr->link();
			tail_ptr = tail_ptr->link();
		}

	}



}



