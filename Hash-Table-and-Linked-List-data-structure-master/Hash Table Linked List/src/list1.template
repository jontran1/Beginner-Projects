 
#include "list1.h"
#include "node1.h"

namespace JONTRAN_1{

	template<class Item>
	list<Item>::list(){
			many_nodes = 0;
			head_ptr=NULL;
 		}
	template<class Item>
	list<Item>::list(const list<Item>& source){
		node<Item>* tail_ptr;
		list_copy(source.head_ptr,head_ptr, tail_ptr);
		many_nodes = source.many_nodes;
 	}
	template<class Item>
	list<Item>::~list(){
			clear(head_ptr);
			many_nodes = 0;
	}
  
	template <class Item>
	typename list<Item>::size_type list<Item>::count(const Item& target) const{
			node<Item>* target_ptr;
			size_type num;
			num = 0;
			target_ptr = list_search(head_ptr,target);
			while(target_ptr!=NULL){
				++num;
				target_ptr = target_ptr->link();
				target_ptr = list_search(target_ptr,target);
			}
			return num;
	}
 
	template<class Item>
	Item list<Item>::list_search_data(const list<Item>& list1, size_type position){
		node<Item>* found;
		found = list1.head_ptr;
		size_type index = 0;
		Item data = 0;
		while(index<position-1){
			++index;
			found=found->link();
		}
		data = found->data();
		return data;
	}
	template<class Item>
	int list<Item>::list_search_key(const list<Item>& list1, size_type position){
		node<Item>* found;
		found = list1.head_ptr;
		size_type index = 0;
		int key = 0;
		while(index<position-1){
			++index;
			found=found->link();
		}
		key = found->get_key();
		return key;
	}
	template<class Item>
	bool list<Item>::is_key_there(const int& key){
		node<Item>* target_ptr;
		target_ptr = head_ptr;
		while(target_ptr!=NULL){
			if(key==target_ptr->get_key()){
				return true;
			}
			target_ptr=target_ptr->link();
		}
		return false;
	}
	template<class Item>
	void list<Item>::clear_list(list<Item>& source){
		clear(source.head_ptr);
	}
	template<class Item>
	Item list<Item>::list_get_data(const int& key){
		node<Item>* target_ptr;
		for(target_ptr = head_ptr; target_ptr!=NULL;target_ptr=target_ptr->link()){
			if(target_ptr->get_key()==key){
				return target_ptr->data();
			}
		}
	      throw ("No key exist.");
	}
	template<class Item>
	void list<Item>::operator =(const list<Item>& source){
		if(this==&source){
			return;
		}
		node<Item>* tail_ptr;
		clear(head_ptr);
		many_nodes = 0;
		list_copy(source.head_ptr,head_ptr,tail_ptr);
		many_nodes = source.many_nodes;
	}
	template<class Item>
	bool list<Item>::operator ==(const list<Item>& source){
		return(head_ptr == source.head_ptr);
	}
	template<class Item>
	bool list<Item>::operator !=(const list<Item>& source){
		return(head_ptr != source.head_ptr);
	}
	template<class Item>
	void list<Item>::insert(const Item& entry, const int& key){
		if(is_key_there(key)==true){
			std::cout<<"Key already exist. Make a new key..."<<std::endl;
			return;
		}

		list_head_insert(head_ptr,entry,key);
		++many_nodes;

	}
	template<class Item>
	bool list<Item>::erase_one(const Item& target){
		node<Item>* target_ptr;
 		target_ptr = list_search(head_ptr,target);
 		if(target_ptr==NULL){
 			return false;
 		}
 		target_ptr->set_data(head_ptr->data());
 		list_head_remove(head_ptr);
 		--many_nodes;
 		return true;
 	}
	template<class Item>
	bool list<Item>::remove_key(const int& key){
		node<Item>* target_ptr;
		target_ptr = key_search(head_ptr,key);
		if(target_ptr==NULL){
			return false;
		}
		target_ptr->set_data(head_ptr->data());
		target_ptr->set_key(head_ptr->get_key());
		list_head_remove(head_ptr);
		--many_nodes;
		return true;

	}
	template<class Item>
	typename list<Item>::size_type list<Item>::erase(const Item& target){
		node<Item>* target_ptr;
		size_type num = 0;
		target_ptr = list_search(head_ptr, target);
		while(target_ptr != NULL){
			target_ptr->set_data(head_ptr->data());
			target_ptr = target_ptr->link();
			list_head_remove(head_ptr);
			--many_nodes;
			++num;
			target_ptr = list_search(target_ptr, target);
		}
		return num;
	}
	template<class Item>
	void list<Item>::operator+=(const list<Item>& addend){
		node<Item>* head_ptr_copy;
		node<Item>* tail_ptr_copy;
		if(addend.many_nodes > 0){
			list_copy(addend.head_ptr,head_ptr_copy,tail_ptr_copy);
			tail_ptr_copy->set_link(head_ptr);
			head_ptr = head_ptr_copy;
			many_nodes+=addend.many_nodes;
		}
	}
	template<class Item>
	list<Item> operator +(const list<Item>& List1, const list<Item>& List2){
		list<Item> answer;
		answer+=List1;
		answer+=List2;
		return answer;

	}



}


